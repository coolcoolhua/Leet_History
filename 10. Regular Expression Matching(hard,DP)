class Solution:
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        n = len(s)
        m = len(p)
		
		# create 2 d array to store result in boolean form
		# M[i][j] is true if s[:i] matches p[:j] else false
        M = [[False for i in range(m+1)] for i in range(n+1)]

		# empty string matches empty pattern, hence true
        M[0][0] = True

		# if pattern has p = "d*" and s = "" then compute the result for first row
        for i in range(1,m+1):
            if p[i-1] == '*':
                M[0][i] = M[0][i-2]
                
        for i in range(1, n+1):
            for j in range(1, m+1):
			
				#右下
                if p[j-1] == '.' or p[j-1] == s[i-1]:
                    M[i][j] = M[i-1][j-1]
                    
                #需要侧行
                elif p[j-1] == "*": # if char is '*' then
					
					
                    if p[j-2] != s[i-1] and p[j-2] != '.':
                        M[i][j] = M[i][j-2]  # no occurence
                    else:
					
                        # one occurance, multiple occurance , no occurance
                        M[i][j] = M[i][j-1] or M[i-1][j] or M[i][j-2]

        return M[-1][-1]


