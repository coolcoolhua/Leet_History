# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def isPalindrome(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        '''
        vals = []
        while head:
            vals += head.val,
            head = head.next
        return vals == vals[::-1]
        '''
        fast = slow = head
    # find the mid node
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
    # reverse the second half
        prev = None
        while slow:
            curr=slow
            slow=slow.next
            curr.next=prev
            prev=curr
            
    # compare the first and second half nodes
        while prev: # while node and head:
            if prev.val != head.val:
                return False
            prev = prev.next
            head = head.next
        return True