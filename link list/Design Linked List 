# Definition for singly-linked list.
class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

class MyLinkedList(object):

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.head=None
        self.length=0
    def increaseLength(self):
        self.length+=1
    def decreaseLength(self):
        self.length-=1

    def get(self, index):
        """
        Get the value of the index-th node in the linked list. If the index is invalid, return -1.
        :type index: int
        :rtype: int
        """
        if index < 0 or index >= self.length:
            return -1
        
        return self.getNode(index).val

    
    def getNode(self,index):
        cur = self.head
        for _ in range(index):
            cur = cur.next
        return cur

    def addAtHead(self, val):
        """
        Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.
        :type val: int
        :rtype: None
        """
        new_head=ListNode(val)
        new_head.next=self.head
        self.head=new_head
        self.increaseLength()
        
        
        

    def addAtTail(self, val):
        """
        Append a node of value val to the last element of the linked list.
        :type val: int
        :rtype: None
        """
        new_tail=ListNode(val)
        if self.length==0:
            self.head=new_tail
        else:
            tail=self.getNode(self.length-1)
            tail.next=new_tail
        self.increaseLength()

    def addAtIndex(self, index, val):
        """
        Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted.
        :type index: int
        :type val: int
        :rtype: None
        """
        if index > self.length:
            return

        if index == self.length:
            self.addAtTail(val)
        else:
            node_before = self.getNode(index-1)
            node_after = self.getNode(index)

            new_node = ListNode(val)

            node_before.next = new_node
            new_node.next = node_after

            self.increaseLength()
    def deleteAtIndex(self, index):
        """
        Delete the index-th node in the linked list, if the index is valid.
        :type index: int
        :rtype: None
        """
        if index < 0 or index >= self.length:
            return
        
        node_to_delete = self.getNode(index)
        del node_to_delete
        if index == 0:
            new_head = self.get(1)
            self.head = new_head
        else:
            node_before = self.getNode(index-1)
            node_after = self.getNode(index+1)
            node_before.next = node_after
        self.decreaseLength()


# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)