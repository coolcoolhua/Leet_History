class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        m, n = len(grid), 0
        if m > 0:
            n = len(grid[0])
        visited = [[False for i in range(n)] for i in range(m)]
        def dfs(x, y):
            if x < 0 or x > m - 1 or y < 0 or y > n - 1 or visited[x][y] or grid[x][y] == '0':
                return
            visited[x][y] = True
            dfs(x - 1, y)
            dfs(x + 1, y)
            dfs(x, y - 1)
            dfs(x, y + 1)
        res = 0
        for x in range(m):
            for y in range(n):
                if not visited[x][y] and grid[x][y] == '1':
                    res += 1
                    dfs(x, y)

        return res
            